openapi: 3.0.3
info:
  title: Prisma API
  description: API generated for the Prisma schema.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server
paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the new user
                password:
                  type: string
                  description: Password for the new user
                preferred_temperature:
                  type: string
                  description: User's preferred temperature
                favorite_continent:
                  type: string
                  description: User's favorite continent
              required:
                - username
                - password
                - preferred_temperature
                - favorite_continent
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the registered user
                  username:
                    type: string
                    description: Username of the registered user
  /users/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the user
                password:
                  type: string
                  description: Password of the user
              required:
                - username
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                    description: JWT token for authenticated requests
  /users/logout:
    delete:
      summary: Logout a user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User logged out successfully
        '400':
          description: Bad request (e.g., user not logged in)
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      summary: Update user details
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username
                preferred_temperature:
                  type: string
                  description: New preferred temperature
                favorite_continent:
                  type: string
                  description: New favorite continent
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully
        '404':
          description: User not found
  /countries:
    get:
      summary: Get all countries
      tags:
        - Country
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
    post:
      summary: Create a new country
      tags:
        - Country
      security:
        - bearerAuth: []
        - isAdmin: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
      responses:
        '201':
          description: Country created successfully
  /countries/{id}:
    get:
      summary: Get country by ID
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Country details retrieved successfully
        '404':
          description: Country not found
    put:
      summary: Update country details
      tags:
        - Country
      security:
        - bearerAuth: []
        - isAdmin: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
      responses:
        '200':
          description: Country updated successfully
        '404':
          description: Country not found
    delete:
      summary: Delete a country
      tags:
        - Country
      security:
        - bearerAuth: []
        - isAdmin: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Country deleted successfully
  /visits:
    get:
      summary: Get all visits
      tags:
        - Visit
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of visits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visit'
    post:
      summary: Create a new visit
      tags:
        - Visit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country_id:
                  type: integer
                  description: ID of the visited country
                date:
                  type: string
                  format: date
                  description: Date of the visit
                rating:
                  type: integer
                  description: Rating of the visit (0-10)
              required:
                - country_id
                - date
                - rating
      responses:
        '201':
          description: Visit created successfully
        '400':
          description: Invalid input
  /visits/{id}:
    get:
      summary: Get visit by ID
      tags:
        - Visit
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Visit details retrieved successfully
        '404':
          description: Visit not found
    put:
      summary: Update visit details
      tags:
        - Visit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  description: New date of the visit
                rating:
                  type: integer
                  description: New rating of the visit
              required:
                - date
                - rating
      responses:
        '200':
          description: Visit updated successfully
        '404':
          description: Visit not found
    delete:
      summary: Delete a visit
      tags:
        - Visit
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Visit deleted successfully
  /couples:
    get:
      summary: Get all couples
      tags:
        - Couple
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of couples retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Couple'
    post:
      summary: Create a new couple
      tags:
        - Couple
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user1_id:
                  type: integer
                  description: ID of the first user
                user2_id:
                  type: integer
                  description: ID of the second user
              required:
                - user1_id
                - user2_id
      responses:
        '201':
          description: Couple created successfully
  /couples/{id}:
    get:
      summary: Get couple by ID
      tags:
        - Couple
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Couple details retrieved successfully
        '404':
          description: Couple not found
    delete:
      summary: Delete a couple
      tags:
        - Couple
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Couple deleted successfully
  /random-country:
    get:
      summary: Get a random country
      tags:
        - Random-country
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Random country retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        username:
          type: string
          description: Username of the user
        password:
          type: string
          description: User's password
        isAdmin:
          type: boolean
          description: Indicates if the user is an administrator
        favorite_continent:
          type: string
          enum:
            - Africa
            - Antarctica
            - Asia
            - Europe
            - North_America
            - Oceania
            - South_America
        preferred_temperature:
          type: string
          enum:
            - Cold
            - Hot
            - Mild
      required:
        - username
        - password
    Country:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the country
        name:
          type: string
          description: Name of the country
        continent:
          type: string
          enum:
            - Africa
            - Antarctica
            - Asia
            - Europe
            - North_America
            - Oceania
            - South_America
        temperature:
          type: string
          enum:
            - Cold
            - Hot
            - Mild
        is_open:
          type: boolean
          description: Indicates if the country is open for visits
      required:
        - name
        - continent
        - temperature
    Visit:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the visit
        country_id:
          type: integer
          description: ID of the visited country
        date:
          type: string
          format: date
          description: Date of the visit
        rating:
          type: integer
          description: Rating of the visit
      required:
        - country_id
        - date
        - rating
    Couple:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the couple
        user1_id:
          type: integer
          description: ID of the first user in the couple
        user2_id:
          type: integer
          description: ID of the second user in the couple
      required:
        - user1_id
        - user2_id
